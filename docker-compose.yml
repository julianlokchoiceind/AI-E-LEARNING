# =====================================
# Docker Compose - AI E-Learning Platform
# =====================================
# Complete development environment setup

version: '3.8'

services:
  # =====================================
  # Backend Service
  # =====================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-elearning-backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    networks:
      - ai-elearning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =====================================
  # Frontend Service
  # =====================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-elearning-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:8000/api/v1
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./frontend:/app
      - frontend_cache:/app/.next
      - /app/node_modules
    networks:
      - ai-elearning-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =====================================
  # Development MongoDB (Optional)
  # =====================================
  mongodb:
    image: mongo:7.0
    container_name: ai-elearning-db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ai_elearning
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ai-elearning-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =====================================
  # Nginx Load Balancer (Production)
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: ai-elearning-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-elearning-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

# =====================================
# Networks
# =====================================
networks:
  ai-elearning-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================================
# Volumes
# =====================================
volumes:
  mongodb_data:
    driver: local
  backend_cache:
    driver: local
  frontend_cache:
    driver: local