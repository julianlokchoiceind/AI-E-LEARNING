name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  
jobs:
  # Frontend Unit and Integration Tests
  frontend-tests:
    name: Frontend Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run type checking
        working-directory: ./frontend
        run: npx tsc --noEmit
        
      - name: Run linting
        working-directory: ./frontend
        run: npm run lint
        
      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:unit
        
      - name: Run integration tests
        working-directory: ./frontend
        run: npm run test:integration
        
      - name: Run coverage tests
        working-directory: ./frontend
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./frontend/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
  # Backend Tests
  backend-tests:
    name: Backend API Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx
          
      - name: Run backend tests
        working-directory: ./backend
        env:
          MONGODB_URI: mongodb://localhost:27017/test_db
          TESTING: true
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
          
      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt
          
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
        
      - name: Start backend server
        working-directory: ./backend
        env:
          MONGODB_URI: mongodb://localhost:27017/test_db
          TESTING: true
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
        run: npm run build
        
      - name: Start frontend server
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
        run: |
          npm start &
          sleep 10
          
      - name: Wait for servers to be ready
        run: |
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8000/health
          
      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e:ci
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30
          
  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
        
      - name: Build application
        working-directory: ./frontend
        run: npm run build
        
      - name: Start application
        working-directory: ./frontend
        run: |
          npm start &
          sleep 10
          
      - name: Run performance tests
        working-directory: ./frontend
        run: npm run test:performance
        
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-report
          path: frontend/performance-report/
          retention-days: 30

  # Accessibility Tests  
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
        
      - name: Build application
        working-directory: ./frontend
        run: npm run build
        
      - name: Start application
        working-directory: ./frontend
        run: |
          npm start &
          sleep 10
          
      - name: Run accessibility tests
        working-directory: ./frontend
        run: npm run test:accessibility
        
      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-report
          path: frontend/accessibility-report/
          retention-days: 30

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: NPM Audit
        working-directory: ./frontend
        run: npm audit --audit-level moderate
        
      - name: Python Safety Check
        working-directory: ./backend
        run: |
          pip install safety
          safety check

  # Build and Bundle Analysis
  build-analysis:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build application
        working-directory: ./frontend
        run: npm run build
        
      - name: Analyze bundle size
        working-directory: ./frontend
        run: npm run analyze
        
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: frontend/.next/analyze/
          retention-days: 30

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, performance-tests, accessibility-tests, security-tests, build-analysis]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY  
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Analysis | ${{ needs.build-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: Check if all tests passed
        if: |
          needs.frontend-tests.result != 'success' ||
          needs.backend-tests.result != 'success' ||
          needs.e2e-tests.result != 'success' ||
          needs.performance-tests.result != 'success' ||
          needs.accessibility-tests.result != 'success' ||
          needs.security-tests.result != 'success' ||
          needs.build-analysis.result != 'success'
        run: |
          echo "❌ Some tests failed. Please check the individual job results."
          exit 1
          
      - name: All tests passed
        if: |
          needs.frontend-tests.result == 'success' &&
          needs.backend-tests.result == 'success' &&
          needs.e2e-tests.result == 'success' &&
          needs.performance-tests.result == 'success' &&
          needs.accessibility-tests.result == 'success' &&
          needs.security-tests.result == 'success' &&
          needs.build-analysis.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          echo "🚀 Ready for deployment!"